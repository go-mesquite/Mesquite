package mesquite

import (
	"fmt"
	"net/http"
)

type Router struct {
	site *MesquiteSite
}

type Route struct {
	name          string
	absolute_path string
	controller    Controller
}

func NewRouter(site *MesquiteSite) *Router {
	return &Router{
		site: site,
	}
}

// Handle is a function that can be registered to a route to handle HTTP requests
type Controller func(http.ResponseWriter, *http.Request)

func (router *Router) HandleFunc(method string, path string, controller Controller) {
	// The silly little standard library router thinks that "/" should match everything that does not already have a handler
	// We only want it to match the root url. If it's not, we will officially register it with the mux
	if path == "/" {
		router.site.rootController = &controller
		fmt.Println("ADDED CONTROLLER")
	} else {
		method_path := method + " " + path
		router.site.Mux.HandleFunc(method_path, func(w http.ResponseWriter, r *http.Request) {

			// Middleware will later go somewhere in here?

			controller(w, r)
		})
	}
}

// GET is a shortcut
func (router *Router) GET(path string, handle Controller) {
	//r.handle(http.MethodGet, path, handle)
	router.HandleFunc("GET", path, handle)
}

// POST is a shortcut
func (router *Router) POST(path string, handle Controller) {
	router.HandleFunc("POST", path, handle)
}

// TODO move this to the site level
func (router *Router) Serve() {
	// Because of how the net/http router works, we need to register this last so we can properly handle root and 404 errors
	router.site.Mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		// Check if the request path is truly "/" and the user wants to handle it. Of if we should give a 404 back
		fmt.Println("PATH", r.URL.Path, router.site.rootController)
		if r.URL.Path == "/" && router.site.rootController != nil {
			// Run the root controller the user defined
			(*router.site.rootController)(w, r) // Dereference pointer to call the function
		} else {
			// Return a 404
			http.NotFound(w, r)
		}
	})

	// Serve the app
	fmt.Println("Serving on localhost:8000")
	http.ListenAndServe("localhost:8000", router.site.Mux)
}
